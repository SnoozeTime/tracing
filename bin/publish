#!/usr/bin/env bash
set -e
USAGE="Publish a new release of a tokio crate

USAGE:
    $(basename "$0") [OPTIONS] <CRATE> <VERSION>

OPTIONS:
    -v, --verbose   Use verbose Cargo output
    -c, --changes   List changes that should be included in the release's changelog
    -d, --dry-run   Perform a dry run (do not publish or tag the release)
    -h, --help      Show this help text and exit"


BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# shellcheck source=utils.sh
source "$BIN_DIR"/utils.sh

DRY_RUN=""
VERBOSE=""

verify() {
    status "Verifying" "if $CRATE v$VERSION can be released"
    ACTUAL=$(cargo pkgid | sed -n 's/.*#\(.*\)/\1/p')

    if [ "$ACTUAL" != "$VERSION" ]; then
        err "expected to release version $VERSION, but Cargo.toml contained $ACTUAL"
        exit 1
    fi

    if git tag -l | grep -Fxq "$TAG" ; then
        err "git tag \`$TAG\` already exists"
        exit 1
    fi

    PATH_DEPS=$(grep -F "path = \"" Cargo.toml | sed -e 's/^/  /')
    if [ -n "$PATH_DEPS" ]; then
        err "crate \`$CRATE\` contained path dependencies:\n$PATH_DEPS"
        echo "path dependencies must be removed prior to release"
        exit 1
    fi
}

release() {
    status "Releasing" "$CRATE v$VERSION"
    cargo package $VERBOSE
    if [ -n "$DRY_RUN" ]; then
        cargo publish $VERBOSE "--dry-run"
        echo "# git tag $TAG && git push --tags"
        return 0
    fi

    cargo publish $VERBOSE "--dry-run"
    read -r "response?Do you want to publish and tag $CRATE $VERSION [y/N]?"
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
        return 0
    fi

    cargo publish $VERBOSE
    status "Tagging" "$TAG"
    git tag "$TAG" && git push --tags
}

while [[ $# -gt 0 ]]
do

case "$1" in
    -h|--help)
    echo "$USAGE"
    exit 0
    ;;
    -v|--verbose)
    VERBOSE="--verbose"
    set +x
    shift
    ;;
    -d|--dry-run)
    DRY_RUN="--dry-run"
    shift
    ;;
    -c|--changes)
    SHOW_CHANGES=1
    shift
    ;;
    -*)
    err "unknown flag \"$1\""
    echo "$USAGE"
    exit 1
    ;;
    *) # crate or version
    if [ -z "$CRATE" ]; then
        CRATE="$1"
    elif [ -z "$VERSION" ]; then
        VERSION="$1"
    else
        err "unknown positional argument \"$1\""
        echo "$USAGE"
        exit 1
    fi
    shift
    ;;
esac
done
# set -- "${POSITIONAL[@]}"

if [ -n "$HELP" ]; then
    echo "$USAGE"
    exit 1
fi

if [ -d "$CRATE" ]; then
    if [ -n "$SHOW_CHANGES" ]; then
        show_changes "$CRATE"
        exit 0
    fi

    if [ -z "$VERSION" ]; then
        err "no version specified!"
        HELP=1
    fi

    if [ -n "$CRATE" ]; then
        TAG="$CRATE-$VERSION"
    else
        err "no crate specified!"
        HELP=1
    fi

    (cd "$CRATE" && verify && release )
else
    err "no such crate \"$CRATE\""
    exit 1
fi

